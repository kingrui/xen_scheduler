#!/usr/bin/env python

import sys, os, subprocess
import re

ostr = ""

def output(str):
    global ostr
    if str.strip() != "":
        ostr = ostr + str + "\n"
    return

def check_con(str):
    if(len(re.findall("Connection timed out", str)) > 0 or len(re.findall("Connection closed", str)) > 0 or len(re.findall("Connection refused", str)) > 0):
        return False
    else:
        return True

def ssh_npb(user, ip, pgm, scale, ttype):
    p = subprocess.Popen("""
        ssh %s@%s "cd ~/scripts/run_scripts; pkill %s.%s.4; nohup ./run_npb %s one '%s' %s 4 ~/NPB3.3/NPB3.3-%s &> /tmp/npb-nohup.out;"
        """
        % (user, ip, pgm, scale, ttype, pgm, scale, ttype.upper()),
        stdout = subprocess.PIPE,
        stderr = subprocess.PIPE,
        shell = True
    )
    output("ssh " + ip + " " + pgm)
    return p

def run_remote(user, ip, pgm, scale, ttype):
    p = ssh_npb(user, ip, pgm, scale, ttype)
    outstr = "".join(p.stdout.readlines()) + "".join(p.stderr.readlines())
    output(outstr)
#    output('for bg')
    while(not check_con(outstr)):
#        output('while bg')
        p = ssh_npb(user, ip, pgm, scale)
        outstr = "".join(p.stdout.readlines()) + "".join(p.stderr.readlines())
        output(outstr)
#        output('while end')
#    output('for end')
#    output('finished')
    return

if __name__ == "__main__":
    if(len(sys.argv) != 6):
        print "atgv num fatal error!"
        sys.exit(0)
    run_remote(sys.argv[1], sys.argv[2], sys.argv[3], sys.argv[4], sys.argv[5])
    sys.stdout.write(ostr)

